/****************************************************************************************************/
/**
\file       cam_crank.cxgate
\brief      CAM CRANK signal generation functions for the XGATE
\author     Abraham Tezmol
\version    2.0
\date       11/09/2013
*/
/****************************************************************************************************/

/*****************************************************************************************************
* Include files
*****************************************************************************************************/
#include    "cam_crank.h"

/* Periodic Interrupt Timer routines prototypes */
#include    "timer.h"


/*****************************************************************************************************
* Declaration of module wide TYPEs 
*****************************************************************************************************/

/*****************************************************************************************************
* Declaration of module wide FUNCTIONs 
*****************************************************************************************************/

/*****************************************************************************************************
* Definition of module wide MACROs / #DEFINE-CONSTANTs 
*****************************************************************************************************/

/*****************************************************************************************************
* Definition of module wide VARIABLEs 
*****************************************************************************************************/

/******************************************************************************
Crank Configuration
Array u8CrankConfig defines the profile for Crankshaft signal

*****************************************************************************************************/

#pragma DATA_SEG SHARED_DATA
UINT8 u8CrankConfig[ENGINE_ANGLE_DEGREES];      /* Default values defined in sNVM_Data_ROM*/                       
#pragma DATA_SEG DEFAULT

/******************************************************************************
Cam Configuration
Array u8CamConfig<n>[] defines the profile for Camshaft signals

******************************************************************************/

#pragma DATA_SEG SHARED_DATA 
UINT8 u8CamConfig0[ENGINE_ANGLE_DEGREES]= 
{
#if 0
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 0   .. 29  degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 30  .. 59  degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 60  .. 89  degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 90  .. 119 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 120 .. 149 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 150 .. 179 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 180 .. 209 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 210 .. 239 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 240 .. 269 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 270 .. 299 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 300 .. 329 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 330 .. 359 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 360 .. 389 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 390 .. 419 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 420 .. 449 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 450 .. 479 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 480 .. 509 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 510 .. 539 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 540 .. 569 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 570 .. 599 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,  /* 600 .. 629 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 630 .. 659 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 660 .. 689 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1   /* 690 .. 719 degrees */
     #endif
     1
}; 

UINT8 u8CamConfig1[ENGINE_ANGLE_DEGREES] = 
{
    #if 0
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 0   .. 29  degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 30  .. 59  degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 60  .. 89  degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 90  .. 119 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 120 .. 149 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 150 .. 179 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 180 .. 209 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 210 .. 239 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 240 .. 269 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 270 .. 299 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 300 .. 329 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 330 .. 359 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 360 .. 389 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 390 .. 419 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 420 .. 449 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 450 .. 479 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 480 .. 509 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 510 .. 539 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 540 .. 569 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 570 .. 599 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,  /* 600 .. 629 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 630 .. 659 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 660 .. 689 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1   /* 690 .. 719 degrees */
     #endif
     1
};  

UINT8 u8CamConfig2[ENGINE_ANGLE_DEGREES]=
{
    #if 0
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 0   .. 29  degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 30  .. 59  degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 60  .. 89  degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 90  .. 119 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 120 .. 149 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 150 .. 179 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 180 .. 209 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 210 .. 239 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 240 .. 269 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 270 .. 299 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 300 .. 329 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 330 .. 359 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 360 .. 389 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 390 .. 419 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 420 .. 449 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 450 .. 479 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 480 .. 509 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 510 .. 539 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 540 .. 569 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 570 .. 599 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,  /* 600 .. 629 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 630 .. 659 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 660 .. 689 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1   /* 690 .. 719 degrees */
     #endif
     1
}; 

UINT8 u8CamConfig3[ENGINE_ANGLE_DEGREES]=
{
     #if 0
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 0   .. 29  degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 30  .. 59  degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 60  .. 89  degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 90  .. 119 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 120 .. 149 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 150 .. 179 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 180 .. 209 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 210 .. 239 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 240 .. 269 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 270 .. 299 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 300 .. 329 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 330 .. 359 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 360 .. 389 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 390 .. 419 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 420 .. 449 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 450 .. 479 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 480 .. 509 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 510 .. 539 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 540 .. 569 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  /* 570 .. 599 degrees */
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,  /* 600 .. 629 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 630 .. 659 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  /* 660 .. 689 degrees */
     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1   /* 690 .. 719 degrees */
     #endif
     1
};   
     
#pragma DATA_SEG DEFAULT

/******************************************************************************

Array cam_crank_channels consists of record of structure type tCamCrankChDescr

******************************************************************************/

#pragma DATA_SEG SHARED_DATA 
tCamCrankChDescr cam_crank_channels[5];
#pragma DATA_SEG DEFAULT


/******************************************************************************
Variables for control data
******************************************************************************/

#pragma DATA_SEG SHARED_DATA

    UINT16  u16RPMValue;
    UINT16  u16SystemRPM;
    UINT16  u16Angle_OneDegreeTicks;
    UINT16  u16CamCrankWidth_ticks;
    UINT16  u16MissingTeethIndex;
    UINT16  u16ExtraTooth_degrees;
    UINT16  u16GlobalArrayIndex;
    UINT16  u16StopAtCrankAngle;

    UINT8   u8CrankActiveLevel;
    UINT8   u8CrankIdleLevel;
    UINT8   u8CrankTeeth;
    UINT8   u8Direction;
    UINT8   u8MissingTeeth;
    UINT8   u8CamSignalTransitions;
    UINT8   u8RPM_new_value;
    UINT8   u8PIT_ClockNew;
    UINT8   u8PIT_Clock;
    UINT8   u8TIM_Clock;
    UINT8   u8TIM_ClockNew;   
    UINT8   u8EnableStopAtToothNumber;
    
#pragma DATA_SEG DEFAULT

/*****************************************************************************************************
* Definition of module wide (CONST-) CONSTANTs 
*****************************************************************************************************/

/*****************************************************************************************************
* Code of module wide FUNCTIONS
*****************************************************************************************************/
 
/****************************************************************************************************
Function Name   : vfnCamCrank_callback
Parameters      : None
Returns         : None
Notes     		: Cam Crank algorithm implementation. Callback function to be invoked 
          		  by appropriate ISR
****************************************************************************************************/
#pragma CODE_SEG XGATE_CODE
    void vfnCamCrank_callback(void) 
    {                                	
        /* ~~~~~~~~~~~~~~~~~~ Check for conditions to stop generation of signals ~~~~~~~~~~~~~~~~~~ */
        if ((u8EnableStopAtToothNumber) && (u16GlobalArrayIndex == u16StopAtCrankAngle)) 
        {
            {
                /* Stop Engine Signal Generation, system has reached the requested tooth number */
                    u16SystemRPM = 0u;
            }
        }
        else
        {
            /* ~~~~~~~~~~~~~~~~~~~~~~~ Should a new RPM value has been requested ~~~~~~~~~~~~~~~~~~ */
            if (u8RPM_new_value)
            {
                if (u8PIT_Clock != u8PIT_ClockNew )
                {
                    /* Low level pre-scaler for PIT needs to be updated */
                    vfnPIT1_ForcePreScalerLoad(u8PIT_ClockNew);
                    u8PIT_Clock = u8PIT_ClockNew;    
                }
                
                /* Load new timeout for 1 degree resolution */
                vfnPIT1_ForceTimeoutLoad(u16Angle_OneDegreeTicks);
                u8RPM_new_value = 0;
            }
            /* ~~~~~~~~~~~~~~~~~~~~~~~ Generate Crank signal ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
            if( u8CrankConfig[u16GlobalArrayIndex] )
            {
                if (u8TIM_Clock != u8TIM_ClockNew )
                {
                    /* Low level pre-scaler for TIM needs to be updated */
                    vfnTimer_SetClockSource(u8TIM_ClockNew);
                    u8TIM_Clock = u8TIM_ClockNew;  
                }
                /* Drive OCx pin to the active level */
                    vfnTimer_DrivePinState(u8CrankActiveLevel);
                /* Schedule future event for Crank signal generation */
                    vfnTimer_ScheduleEvent(u16CamCrankWidth_ticks, u8CrankIdleLevel);
                
            }        
            /* ~~~~~~~~~~~~~~~~~~~~~~~ Generate CAM signal 0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
            if( u8CamConfig0[u16GlobalArrayIndex] )
            {
                PORTA |= 0x01; /* Set 1 */
            }
            else
            {	      
                PORTA &= 0xFE; /* Set 0 */
            }
            /* ~~~~~~~~~~~~~~~~~~~~~~~ Generate CAM signal 1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
            if( u8CamConfig1[u16GlobalArrayIndex] )
            {
                PORTA |= 0x02; /* Set 1 */
            }
            else
            {	      
                PORTA &= 0xFD; /* Set 0 */
            }
            /* ~~~~~~~~~~~~~~~~~~~~~~~ Generate CAM signal 2 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
            if( u8CamConfig2[u16GlobalArrayIndex] )
            {
                PORTA |= 0x04; /* Set 1 */
            }
            else
            {	      
                PORTA &= 0xFB; /* Set 0 */
            }
            /* ~~~~~~~~~~~~~~~~~~~~~~~ Generate CAM signal 3 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
            if( u8CamConfig3[u16GlobalArrayIndex] )
            {
                PORTA |= 0x08; /* Set 1 */
            }
            else
            {	      
                PORTA &= 0xF7; /* Set 0 */
            }                
            /* ~~~~~~~~~~~~~~~~~~~~~~~ Point to next element in array ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
            if(  !u8Direction )
            {
                /* Point to next elements while moving forward */
                u16GlobalArrayIndex++; 
                if (u16GlobalArrayIndex >= ENGINE_ANGLE_DEGREES)
                {
                    u16GlobalArrayIndex = 0;
                }
            }
            else 
            {   
                /* Point to next elements while moving backwards */
                if( u16GlobalArrayIndex > 0 )
                { 
                    u16GlobalArrayIndex--; 
                }
                else
                {
                    u16GlobalArrayIndex = (ENGINE_ANGLE_DEGREES - 1);
                }                  
            }       	  	   		
        }   	    	    	    	
    }
#pragma CODE_SEG DEFAULT

/****************************************************************************************************
Function Name : vfnCamCrank_Init_XGATE
Parameters    : None
Returns     : None
Notes     : Cam Crank implementation. Initialization of Callback function 
          to be called by appropriate ISR
****************************************************************************************************/
#pragma CODE_SEG XGATE_CODE
  void interrupt vfnCamCrank_Init_XGATE_Isr(void) 
  {                                 
    /* Periodic Interrupt Timer Low Level Initialization */
      vfnPIT1_Init(&vfnCamCrank_callback, __XGATE_CORE);
    
    /* Timer channel 1 has to be initialized --> Crank signal */
      vfnTimer_Init ();

    /* Clear Software Interrupt request flag */
      XGATE_SW_TRIGGER_X( SOFTWARE_TRIGGER_1, SOFTWARE_TRIGGER_DISABLE);
  }
#pragma CODE_SEG DEFAULT

